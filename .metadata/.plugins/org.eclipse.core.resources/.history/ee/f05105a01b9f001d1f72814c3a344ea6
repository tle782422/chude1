package com.truyentranh.webtruyen;





import javax.annotation.Resource;
import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationEventPublisher;
import org.springframework.security.authentication.DefaultAuthenticationEventPublisher;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.NoOpPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.authentication.logout.HeaderWriterLogoutHandler;
import org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl;
import org.springframework.security.web.authentication.rememberme.PersistentTokenRepository;
import org.springframework.security.web.header.writers.ClearSiteDataHeaderWriter;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;

import com.truyentranh.webtruyen.security.handler.CustomLogoutSuccessHandler;
import com.truyentranh.webtruyen.security.services.UserServiceImpl;

@Configuration
@EnableWebSecurity
public class SecurityConfiguration extends WebSecurityConfigurerAdapter {

	
	@Autowired
	private UserServiceImpl userService;
	
	@Resource
	private DataSource dataSource;

	
	//No Encoder ex:tle782422@gmail.com
	@Bean
	public PasswordEncoder passwordEncoder() {
		return NoOpPasswordEncoder.getInstance();
	}	
	//Encoder by BCrypt
	@Bean
	public PasswordEncoder passwordEncoderType2() {
		return new BCryptPasswordEncoder();
	}	
	@Bean
    public DaoAuthenticationProvider authenticationProvider() {
        DaoAuthenticationProvider auth = new DaoAuthenticationProvider();
        auth.setUserDetailsService(userService);
        auth.setPasswordEncoder(passwordEncoderType2());
        return auth;
    }
	@Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.authenticationProvider(authenticationProvider());
        
    }
	
	@Bean
	PersistentTokenRepository persistentTokenRepository() {
		JdbcTokenRepositoryImpl db = new JdbcTokenRepositoryImpl();
		db.setDataSource(dataSource);
		return db;
	}
    @Bean
    public AuthenticationEventPublisher authenticationEventPublisher
            (ApplicationEventPublisher applicationEventPublisher) {
        return new DefaultAuthenticationEventPublisher(applicationEventPublisher);
    }
	
	@Override
	protected void configure(HttpSecurity http) throws Exception {
		// Chỉ đường dẫn đã đăng nhập.
		http.authorizeRequests()
		.antMatchers("/registration**","/mailer/**","/login/**","/logout/**", "/js/**", "/css/**", "/img/**").permitAll()
		.antMatchers("/security/user/Edit/**").access("hasRole('ROLE_ADMIN')")
		.antMatchers("/**").access("hasRole('ROLE_ADMIN')").anyRequest().authenticated();
		
		// Cấu hình remember me, thời gian là 2592000 giây.   userDetailsService(userService) tokenRepository(persistentTokenRepository())
		http.rememberMe().userDetailsService(this.userService)
		.tokenValiditySeconds(2592000)
		.rememberMeCookieName("toan").key("AbcdefghiJklmNoPqRstUvXyz");

        //Setting HTTPS for my account
        http.requiresChannel().antMatchers("/**").requiresSecure();
        
		
		// Cấu hình cho Login Form.
		http.authorizeRequests().and()
		.formLogin()
			.loginProcessingUrl("/login")
			.loginPage("/login")
			.defaultSuccessUrl("/index")
			.failureUrl("/login?error")
		.and()		
		// Cấu hình cho Logout Form.
		.logout()
			.logoutRequestMatcher(new AntPathRequestMatcher("/logout"))
			.logoutSuccessUrl("/login?logout")
			.invalidateHttpSession(true) 
			.deleteCookies("JSESSIONID")
			.clearAuthentication(true)
		.and()
			.exceptionHandling().accessDeniedPage("/404");
		// Quản lý phiên
//		http.sessionManagement().sessionFixation().migrateSession().maximumSessions(1)
//			.maxSessionsPreventsLogin(true);
		http.sessionManagement().maxSessionsPreventsLogin(true).invalidSessionUrl("/login/invalid-session");
//        .sessionFixation().none(); 

		

	}

}
